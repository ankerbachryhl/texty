"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var utils_1 = require("./utils");
function buildInfo(rootFieldName, operation, schema, info) {
    if (!info) {
        info = buildInfoForAllScalars(rootFieldName, schema, operation);
    }
    else if (typeof info === 'string') {
        info = buildInfoFromFragment(rootFieldName, schema, operation, info);
    }
    return info;
}
exports.buildInfo = buildInfo;
function buildInfoForAllScalars(rootFieldName, schema, operation) {
    var fieldNodes = [];
    var type = utils_1.getTypeForRootFieldName(rootFieldName, operation, schema);
    var selections;
    if (type instanceof graphql_1.GraphQLObjectType) {
        var fields_1 = type.getFields();
        selections = Object.keys(fields_1)
            .filter(function (f) { return utils_1.isScalar(fields_1[f].type); })
            .map(function (fieldName) {
            var field = fields_1[fieldName];
            return {
                kind: 'Field',
                name: { kind: 'Name', value: field.name },
            };
        });
    }
    var fieldNode = {
        kind: 'Field',
        name: { kind: 'Name', value: rootFieldName },
        selectionSet: selections ? { kind: 'SelectionSet', selections: selections } : undefined,
    };
    fieldNodes.push(fieldNode);
    var parentType = {
        query: function () { return schema.getQueryType(); },
        mutation: function () { return schema.getMutationType(); },
        subscription: function () { return schema.getSubscriptionType(); },
    }[operation]();
    return {
        fieldNodes: fieldNodes,
        fragments: {},
        schema: schema,
        fieldName: rootFieldName,
        returnType: type,
        parentType: parentType,
        path: undefined,
        rootValue: undefined,
        operation: {
            kind: 'OperationDefinition',
            operation: operation,
            selectionSet: { kind: 'SelectionSet', selections: [] },
        },
        variableValues: {},
    };
}
exports.buildInfoForAllScalars = buildInfoForAllScalars;
function buildInfoFromFragment(rootFieldName, schema, operation, query) {
    var type = utils_1.getTypeForRootFieldName(rootFieldName, operation, schema);
    var fieldNode = {
        kind: 'Field',
        name: { kind: 'Name', value: rootFieldName },
        selectionSet: extractQuerySelectionSet(query, type.name, schema),
    };
    return {
        fieldNodes: [fieldNode],
        fragments: {},
        schema: schema,
        fieldName: rootFieldName,
        returnType: type,
        parentType: schema.getQueryType(),
        path: undefined,
        rootValue: undefined,
        operation: {
            kind: 'OperationDefinition',
            operation: operation,
            selectionSet: { kind: 'SelectionSet', selections: [] },
        },
        variableValues: {},
    };
}
exports.buildInfoFromFragment = buildInfoFromFragment;
function extractQuerySelectionSet(query, typeName, schema) {
    if (!query.startsWith('fragment')) {
        query = "fragment tmp on " + typeName + " " + query;
    }
    var document = graphql_1.parse(query);
    var errors = graphql_1.validate(schema, document).filter(function (e) { return e.message.match(/Fragment ".*" is never used./) === null; });
    if (errors.length > 0) {
        throw errors;
    }
    var queryNode = document.definitions[0];
    if (!queryNode || queryNode.kind !== 'FragmentDefinition') {
        throw new Error("Invalid query: " + query);
    }
    return queryNode.selectionSet;
}
//# sourceMappingURL=info.js.map