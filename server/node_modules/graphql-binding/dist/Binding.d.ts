import { GraphQLResolveInfo, GraphQLSchema } from 'graphql';
import { QueryMap, BindingOptions, SubscriptionMap, Operation } from './types';
export declare class Binding<TQueryMap extends object = QueryMap, TSubscriptionMap extends object = SubscriptionMap> {
    query: TQueryMap;
    mutation: TQueryMap;
    subscription: TSubscriptionMap;
    schema: GraphQLSchema;
    before: () => void;
    private fragmentReplacements;
    constructor({schema, fragmentReplacements, before, handler, subscriptionHandler}: BindingOptions);
    request<T = any>(query: string, variables?: {
        [key: string]: any;
    }): Promise<T>;
    delegate(operation: Operation, fieldName: string, args: {
        [key: string]: any;
    }, context: {
        [key: string]: any;
    }, info?: GraphQLResolveInfo | string): Promise<any>;
    delegateSubscription(fieldName: string, args?: {
        [key: string]: any;
    }, context?: {
        [key: string]: any;
    }, infoOrQuery?: GraphQLResolveInfo | string): Promise<AsyncIterator<any>>;
}
