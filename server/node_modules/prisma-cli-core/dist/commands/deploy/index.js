"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_cli_engine_1 = require("prisma-cli-engine");
var chalk_1 = require("chalk");
var chokidar = require("chokidar");
var inquirer = require("inquirer");
var path = require("path");
var fs = require("fs-extra");
var printSchema_1 = require("./printSchema");
var up_1 = require("../local/up");
var Seeder_1 = require("../seed/Seeder");
var semver = require("semver");
var debug = require('debug')('deploy');
var util_1 = require("../../util");
var spawn_1 = require("../../spawn");
var sillyname = require("sillyname");
var getSchemaPathFromConfig_1 = require("./getSchemaPathFromConfig");
var getGraphQLCliBin_1 = require("../../utils/getGraphQLCliBin");
var Deploy = /** @class */ (function (_super) {
    __extends(Deploy, _super);
    function Deploy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.deploying = false;
        _this.showedLines = 0;
        _this.showedHooks = false;
        return _this;
    }
    Deploy.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a, force, watch, interactive, envFile, dryRun, serviceName, stage, cluster, clusterName, isOnline, _b, gotCluster, value, envNotice, clusterWorkspace, workspace, projectNew;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        debug('run');
                        _a = this.flags, force = _a.force, watch = _a.watch, interactive = _a.interactive;
                        envFile = this.flags['env-file'];
                        dryRun = this.flags['dry-run'];
                        if (!(envFile && !fs.pathExistsSync(path.join(this.config.cwd, envFile)))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.out.error("--env-file path '" + envFile + "' does not exist")];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.definition.load(this.flags, envFile)];
                    case 3:
                        _c.sent();
                        if (!this.definition.definition) {
                            throw new Error("Couldn\u2019t find `prisma.yml` file. Are you in the right directory?");
                        }
                        serviceName = this.definition.definition.service;
                        stage = this.definition.definition.stage;
                        cluster = this.definition.getCluster(false);
                        clusterName = this.definition.getClusterName();
                        if (!(!cluster && clusterName && clusterName !== 'local')) return [3 /*break*/, 5];
                        this.out.log("You're not logged in and cluster " + chalk_1.default.bold(clusterName) + " could not be found locally. Trying to authanticate.\n");
                        return [4 /*yield*/, this.client.login()];
                    case 4:
                        _c.sent();
                        cluster = this.definition.getCluster();
                        _c.label = 5;
                    case 5:
                        if (!cluster) return [3 /*break*/, 7];
                        return [4 /*yield*/, cluster.isOnline()];
                    case 6:
                        _b = _c.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _b = false;
                        _c.label = 8;
                    case 8:
                        isOnline = _b;
                        if (!(this.definition.definition.cluster === 'local' &&
                            (!cluster || !isOnline))) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.localUp()];
                    case 9:
                        cluster = _c.sent();
                        return [3 /*break*/, 13];
                    case 10:
                        if (!(!isOnline &&
                            cluster &&
                            cluster.local &&
                            (cluster.baseUrl.includes('127.0.0.1') ||
                                cluster.baseUrl.includes('localhost')))) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.localUp()];
                    case 11:
                        cluster = _c.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        if (cluster && !isOnline) {
                            throw new Error("Could not connect to cluster " + chalk_1.default.bold(cluster.name) + " with host " + cluster.baseUrl + ". Did you provide the right port?");
                        }
                        _c.label = 13;
                    case 13:
                        gotCluster = false;
                        if (!!cluster) return [3 /*break*/, 15];
                        if (this.definition.definition.hasOwnProperty('cluster')) {
                            value = this.definition.rawJson.cluster;
                            envNotice = value.toLowerCase().includes('env')
                                ? "Make sure that the env var " + value + " is set correctly or remove the cluster property from the prisma.yml and execute deploy again to get a new cluster."
                                : '';
                            throw new Error("Property cluster in prisma.yml is provided, but provided value " + value + " could not be resolved. " + envNotice);
                        }
                        return [4 /*yield*/, this.getCluster(serviceName, stage)];
                    case 14:
                        clusterWorkspace = _c.sent();
                        cluster = clusterWorkspace.cluster;
                        gotCluster = true;
                        _c.label = 15;
                    case 15:
                        if (cluster) {
                            this.env.setActiveCluster(cluster);
                        }
                        else {
                            throw new Error("No cluster set. Please set the \"cluster\" property in your prisma.yml");
                        }
                        if (this.showedLines > 0) {
                            this.out.up(this.showedLines);
                        }
                        if (gotCluster) {
                            this.out.log("Added " + chalk_1.default.bold("cluster: " + cluster.name) + " to prisma.yml");
                        }
                        if (!(cluster && !cluster.local)) return [3 /*break*/, 17];
                        workspace = this.definition.getWorkspace();
                        if (!(workspace &&
                            !workspace.startsWith('public-') &&
                            (!this.env.cloudSessionKey || this.env.cloudSessionKey === ''))) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.client.login()];
                    case 16:
                        _c.sent();
                        cluster.clusterSecret = this.env.cloudSessionKey;
                        _c.label = 17;
                    case 17: return [4 /*yield*/, this.client.initClusterClient(cluster, this.definition.getWorkspace() || '*', serviceName, stage)];
                    case 18:
                        _c.sent();
                        return [4 /*yield*/, this.checkVersions(cluster)];
                    case 19:
                        _c.sent();
                        projectNew = false;
                        return [4 /*yield*/, this.projectExists(cluster, serviceName, stage, this.definition.getWorkspace())];
                    case 20:
                        if (!!(_c.sent())) return [3 /*break*/, 22];
                        return [4 /*yield*/, this.addProject(cluster, serviceName, stage, this.definition.getWorkspace())];
                    case 21:
                        _c.sent();
                        projectNew = true;
                        _c.label = 22;
                    case 22: return [4 /*yield*/, this.deploy(stage, serviceName, cluster, this.definition.definition.cluster, force, dryRun, projectNew, this.definition.getWorkspace())];
                    case 23:
                        _c.sent();
                        if (watch) {
                            this.out.log('Watching for change...');
                            chokidar
                                .watch(this.config.definitionDir, { ignoreInitial: true })
                                .on('all', function () {
                                setImmediate(function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (!!this.deploying) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.definition.load(this.flags)];
                                            case 1:
                                                _a.sent();
                                                return [4 /*yield*/, this.deploy(stage, this.definition.definition.service, cluster, this.definition.definition.cluster, force, dryRun, false, this.definition.getWorkspace())];
                                            case 2:
                                                _a.sent();
                                                this.out.log('Watching for change...');
                                                _a.label = 3;
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.checkVersions = function (cluster) {
        return __awaiter(this, void 0, void 0, function () {
            var clusterVersion, gcSemverRegex, clusterMatch, cliMatch, localNote, error, mainSatisfied;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, cluster.getVersion()];
                    case 1:
                        clusterVersion = _a.sent();
                        if (clusterVersion) {
                            gcSemverRegex = /(\d{1,2}\.\d{1,2}\.?\d{0,2})-?\w*(\d{1,2}\.\d{1,2}\.?\d{0,2})/;
                            clusterMatch = clusterVersion.match(gcSemverRegex);
                            cliMatch = this.config.version.match(gcSemverRegex);
                            localNote = cluster.local
                                ? "Please use " + chalk_1.default.green.bold('prisma local upgrade') + " to get the latest cluster."
                                : "Please update your prisma cli to the latest version " + chalk_1.default.green.bold('npm install -g prisma');
                            error = new Error("The CLI version (" + this.config.version + ") and cluster version (" + clusterVersion + ") of cluster " + cluster.name + " do not match. " + localNote);
                            if (clusterMatch && clusterMatch[1] && cliMatch && cliMatch[1]) {
                                mainSatisfied = semver.satisfies(cliMatch[1], "~" + clusterMatch[1]);
                                if (mainSatisfied) {
                                    // disable minor check in beta
                                    // if (clusterMatch[2] && cliMatch[2]) {
                                    //   const secondarySatisfied = semver.satisfies(
                                    //     cliMatch[2],
                                    //     `~${clusterMatch[2]}`,
                                    //   )
                                    //   if (!secondarySatisfied) {
                                    //     throw error
                                    //   }
                                    // }
                                }
                                else {
                                    throw error;
                                }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.getSillyName = function () {
        return slugify(sillyname()).split('-')[0] + "-" + Math.round(Math.random() * 1000);
    };
    Deploy.prototype.getPublicName = function () {
        return "public-" + this.getSillyName();
    };
    Deploy.prototype.localUp = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cluster;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, up_1.default.run(this.config)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.env.load(this.flags)];
                    case 2:
                        _a.sent();
                        cluster = this.env.clusterByName('local');
                        this.env.setActiveCluster(cluster);
                        return [2 /*return*/, cluster];
                }
            });
        });
    };
    Deploy.prototype.projectExists = function (cluster, name, stage, workspace) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = Boolean;
                        return [4 /*yield*/, this.client.getProject(util_1.concatName(cluster, name, workspace), stage)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
                    case 2:
                        e_1 = _b.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.addProject = function (cluster, name, stage, workspace) {
        return __awaiter(this, void 0, void 0, function () {
            var createdProject;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.out.action.start("Creating stage " + stage + " for service " + name);
                        return [4 /*yield*/, this.client.addProject(util_1.concatName(cluster, name, workspace), stage, this.definition.secrets)];
                    case 1:
                        createdProject = _a.sent();
                        this.out.action.stop();
                        return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.deploy = function (stageName, serviceName, cluster, completeClusterName, force, dryRun, projectNew, workspace) {
        return __awaiter(this, void 0, void 0, function () {
            var localNote, before, b, verb, migrationResult, done, revision, migration, schemaChanged;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.deploying = true;
                        localNote = cluster.local ? ' locally' : '';
                        before = Date.now();
                        b = function (s) { return "`" + chalk_1.default.bold(s) + "`"; };
                        verb = dryRun ? 'Performing dry run for' : 'Deploying';
                        this.out.action.start(verb + " service " + b(serviceName) + " to stage " + b(stageName) + " on cluster " + b(completeClusterName));
                        return [4 /*yield*/, this.client.deploy(util_1.concatName(cluster, serviceName, workspace), stageName, this.definition.typesString, dryRun, this.definition.getSubscriptions(), this.definition.secrets)];
                    case 1:
                        migrationResult = _a.sent();
                        this.out.action.stop(util_1.prettyTime(Date.now() - before));
                        this.printResult(migrationResult);
                        if (!(migrationResult.migration &&
                            migrationResult.migration.revision > 0 &&
                            !dryRun)) return [3 /*break*/, 8];
                        before = Date.now();
                        this.out.action.start("Applying changes", this.getProgress(0, migrationResult.migration.steps.length));
                        done = false;
                        _a.label = 2;
                    case 2:
                        if (!!done) return [3 /*break*/, 7];
                        revision = migrationResult.migration.revision;
                        return [4 /*yield*/, this.client.getMigration(util_1.concatName(cluster, serviceName, workspace), stageName)];
                    case 3:
                        migration = _a.sent();
                        if (!(migration.errors && migration.errors.length > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.out.error(migration.errors.join('\n'))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (migration.applied === migrationResult.migration.steps.length) {
                            done = true;
                        }
                        this.out.action.status = this.getProgress(migration.applied, migrationResult.migration.steps.length);
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 500); })];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 7:
                        this.out.action.stop(util_1.prettyTime(Date.now() - before));
                        _a.label = 8;
                    case 8:
                        if (!migrationResult.migration) return [3 /*break*/, 11];
                        if (!(this.definition.definition.seed &&
                            !this.flags['no-seed'] &&
                            projectNew)) return [3 /*break*/, 10];
                        this.printHooks();
                        return [4 /*yield*/, this.seed(cluster, projectNew, serviceName, stageName, this.definition.getWorkspace())];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        // no action required
                        this.deploying = false;
                        if (migrationResult.migration) {
                            this.printEndpoints(cluster, serviceName, stageName, this.definition.getWorkspace() || undefined);
                        }
                        _a.label = 11;
                    case 11: return [4 /*yield*/, this.generateSchema(cluster, serviceName, stageName)];
                    case 12:
                        schemaChanged = _a.sent();
                        if (!schemaChanged) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.graphqlPrepare()];
                    case 13:
                        _a.sent();
                        _a.label = 14;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.printHooks = function () {
        if (!this.showedHooks) {
            this.out.log(chalk_1.default.bold("\nHooks:"));
            this.showedHooks = true;
        }
    };
    Deploy.prototype.getProgress = function (applied, of) {
        return this.out.color.prisma("(" + applied + "/" + of + ")");
    };
    Deploy.prototype.seed = function (cluster, projectNew, serviceName, stageName, workspace) {
        return __awaiter(this, void 0, void 0, function () {
            var seeder, before, from;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        seeder = new Seeder_1.Seeder(this.definition, this.client, this.out, this.config);
                        before = Date.now();
                        from = this.definition.definition.seed &&
                            this.definition.definition.seed.import
                            ? " from `" + this.definition.definition.seed.import + "`"
                            : '';
                        this.out.action.start("Importing seed dataset" + from);
                        return [4 /*yield*/, seeder.seed(util_1.concatName(cluster, serviceName, workspace), stageName)];
                    case 1:
                        _a.sent();
                        this.out.action.stop(util_1.prettyTime(Date.now() - before));
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns true if there was a change
     */
    Deploy.prototype.generateSchema = function (cluster, serviceName, stageName) {
        return __awaiter(this, void 0, void 0, function () {
            var schemaPath, schemaDir, token, before, schemaString, oldSchemaString, beforeWrite;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schemaPath = getSchemaPathFromConfig_1.getSchemaPathFromConfig() || this.definition.definition.schema;
                        if (!schemaPath) return [3 /*break*/, 2];
                        this.printHooks();
                        schemaDir = path.dirname(schemaPath);
                        fs.mkdirpSync(schemaDir);
                        token = this.definition.getToken(serviceName, stageName);
                        before = Date.now();
                        this.out.action.start("Checking, if schema file changed");
                        return [4 /*yield*/, printSchema_1.fetchAndPrintSchema(this.client, util_1.concatName(cluster, serviceName, this.definition.getWorkspace()), stageName, token)];
                    case 1:
                        schemaString = _a.sent();
                        this.out.action.stop(util_1.prettyTime(Date.now() - before));
                        oldSchemaString = fs.pathExistsSync(schemaPath)
                            ? fs.readFileSync(schemaPath, 'utf-8')
                            : null;
                        if (schemaString !== oldSchemaString) {
                            beforeWrite = Date.now();
                            this.out.action.start("Writing database schema to `" + schemaPath + "` ");
                            fs.writeFileSync(schemaPath, schemaString);
                            this.out.action.stop(util_1.prettyTime(Date.now() - beforeWrite));
                            return [2 /*return*/, true];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, false];
                }
            });
        });
    };
    Deploy.prototype.graphqlPrepare = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dir, graphqlBin, oldCwd, configDir, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        try {
                            dir = this.config.findConfigDir();
                        }
                        catch (e) {
                            //
                        }
                        if (!dir) return [3 /*break*/, 5];
                        return [4 /*yield*/, getGraphQLCliBin_1.default()];
                    case 1:
                        graphqlBin = _a.sent();
                        debug({ graphqlBin: graphqlBin });
                        this.out.log("Running " + chalk_1.default.cyan("$ graphql prepare") + "...");
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        oldCwd = process.cwd();
                        configDir = this.config.findConfigDir();
                        if (configDir) {
                            process.chdir(configDir);
                        }
                        return [4 /*yield*/, spawn_1.spawn(graphqlBin, ['prepare'])];
                    case 3:
                        _a.sent();
                        process.chdir(oldCwd);
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        this.out.warn(e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Deploy.prototype.printResult = function (payload) {
        if (payload.errors && payload.errors.length > 0) {
            this.out.log("" + chalk_1.default.bold.red('Errors:'));
            this.out.migration.printErrors(payload.errors);
            this.out.log('');
            this.out.exit(1);
        }
        if (!payload.migration || payload.migration.steps.length === 0) {
            this.out.log('Service is already up to date.');
            return;
        }
        if (payload.migration.steps.length > 0) {
            // this.out.migrati
            this.out.log('\n' + chalk_1.default.bold('Changes:'));
            this.out.migration.printMessages(payload.migration.steps);
            this.out.log('');
        }
    };
    Deploy.prototype.printEndpoints = function (cluster, serviceName, stageName, workspace) {
        this.out.log("\n" + chalk_1.default.bold('Your GraphQL database endpoint is live:') + "\n\n  " + chalk_1.default.bold('HTTP:') + "  " + cluster.getApiEndpoint(serviceName, stageName, workspace) + "\n  " + chalk_1.default.bold('WS:') + "    " + cluster.getWSEndpoint(serviceName, stageName, workspace) + "\n");
    };
    Deploy.prototype.getCluster = function (serviceName, stage) {
        return __awaiter(this, void 0, void 0, function () {
            var loggedIn, workspaceClusterCombination, splitted, workspace, clusterName, exists, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.client.isAuthenticated()];
                    case 1:
                        loggedIn = _b.sent();
                        return [4 /*yield*/, this.clusterSelection(serviceName, stage, loggedIn)];
                    case 2:
                        workspaceClusterCombination = _b.sent();
                        splitted = workspaceClusterCombination.split('/');
                        workspace = splitted.length > 1 ? splitted[0] : null;
                        clusterName = splitted.slice(-1)[0];
                        exists = this.env.clusterByName(clusterName);
                        // in this case it's a public cluster and we need to generate a workspace name
                        if (!loggedIn && exists && exists.shared) {
                            workspace = this.getPublicName();
                            debug("silly name", workspace);
                            workspaceClusterCombination = workspace + "/" + clusterName;
                        }
                        if (!!exists) return [3 /*break*/, 7];
                        if (!(clusterName === 'local')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.localUp()];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.out.error("Could not find selected cluster " + clusterName)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 11];
                    case 7:
                        _a = !exists.isPrivate && !exists.shared;
                        if (!_a) return [3 /*break*/, 9];
                        return [4 /*yield*/, exists.isOnline()];
                    case 8:
                        _a = !(_b.sent());
                        _b.label = 9;
                    case 9:
                        if (!_a) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.localUp()];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11: return [4 /*yield*/, this.definition.addCluster(workspaceClusterCombination, this.flags)];
                    case 12:
                        _b.sent();
                        return [2 /*return*/, {
                                cluster: this.env.clusterByName(clusterName) || undefined,
                                workspace: workspace || undefined,
                            }];
                }
            });
        });
    };
    Deploy.prototype.clusterSelection = function (serviceName, stage, loggedIn) {
        return __awaiter(this, void 0, void 0, function () {
            var choices, _a, question, cluster;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        debug({ loggedIn: loggedIn });
                        if (!loggedIn) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getLoggedInChoices()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = this.getPublicChoices();
                        _b.label = 3;
                    case 3:
                        choices = _a;
                        question = {
                            name: 'cluster',
                            type: 'list',
                            message: "Please choose the cluster you want to deploy \"" + serviceName + "@" + stage + "\" to",
                            choices: choices,
                            pageSize: 9,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 4:
                        cluster = (_b.sent()).cluster;
                        this.showedLines += 2;
                        if (!(cluster === 'login')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.client.login()];
                    case 5:
                        _b.sent();
                        return [2 /*return*/, this.clusterSelection(serviceName, stage, true)];
                    case 6: return [2 /*return*/, cluster];
                }
            });
        });
    };
    Deploy.prototype.getLocalClusterChoices = function () {
        var clusters = this.env.clusters.filter(function (c) { return !c.shared && !c.isPrivate; });
        var clusterNames = clusters.map(function (c) {
            var note = c.baseUrl.includes('localhost') || c.baseUrl.includes('127.0.0.1')
                ? 'Local cluster (requires Docker)'
                : 'Self-hosted';
            return [c.name, note];
        });
        if (clusterNames.length === 0) {
            clusterNames.push(['local', 'Local cluster (requires Docker)']);
        }
        return clusterNames;
    };
    Deploy.prototype.getLoggedInChoices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var localChoices, combinations, remoteClusters, allCombinations;
            return __generator(this, function (_a) {
                localChoices = this.getLocalClusterChoices();
                combinations = [];
                remoteClusters = this.env.clusters.filter(function (c) { return c.shared || c.isPrivate; });
                remoteClusters.forEach(function (cluster) {
                    var label = _this.env.sharedClusters.includes(cluster.name)
                        ? 'Free development cluster (hosted on Prisma Cloud)'
                        : 'Private Prisma Cluster';
                    combinations.push([cluster.workspaceSlug + "/" + cluster.name, label]);
                });
                allCombinations = combinations.concat(localChoices);
                return [2 /*return*/, this.convertChoices(allCombinations).concat([
                        new inquirer.Separator('                     '),
                        new inquirer.Separator(chalk_1.default.dim("You can learn more about deployment in the docs: http://bit.ly/prisma-graphql-deployment")),
                    ])];
            });
        });
    };
    Deploy.prototype.convertChoices = function (choices) {
        var padded = this.out.printPadded(choices, 0, 6).split('\n');
        return padded.map(function (name, index) { return ({
            name: name,
            value: choices[index][0],
        }); });
    };
    Deploy.prototype.getPublicChoices = function () {
        var publicChoices = [
            [
                'prisma-eu1',
                'Public development cluster (hosted in EU on Prisma Cloud)',
            ],
            [
                'prisma-us1',
                'Public development cluster (hosted in US on Prisma Cloud)',
            ],
        ];
        var allCombinations = publicChoices.concat(this.getLocalClusterChoices());
        return this.convertChoices(allCombinations).concat([
            new inquirer.Separator('                     '),
            {
                value: 'login',
                name: 'Log in or create new account on Prisma Cloud',
            },
            new inquirer.Separator('                     '),
            new inquirer.Separator(chalk_1.default.dim("Note: When not logged in, service deployments to Prisma Cloud expire after 7 days.")),
            new inquirer.Separator(chalk_1.default.dim("You can learn more about deployment in the docs: http://bit.ly/prisma-graphql-deployment")),
            new inquirer.Separator('                     '),
        ]);
    };
    Deploy.prototype.stageNameSelector = function (defaultName) {
        return __awaiter(this, void 0, void 0, function () {
            var question, stage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'stage',
                            type: 'input',
                            message: 'Please choose the stage name',
                            default: defaultName,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        stage = (_a.sent()).stage;
                        this.showedLines += 1;
                        return [2 /*return*/, stage];
                }
            });
        });
    };
    Deploy.topic = 'deploy';
    Deploy.description = 'Deploy service changes (or new service)';
    Deploy.group = 'general';
    Deploy.allowAnyFlags = true;
    Deploy.help = "\n  \n  " + chalk_1.default.green.bold('Examples:') + "\n      \n" + chalk_1.default.gray('-') + " Deploy local changes from prisma.yml to the default service environment.\n  " + chalk_1.default.green('$ prisma deploy') + "\n\n" + chalk_1.default.gray('-') + " Deploy local changes to a specific stage\n  " + chalk_1.default.green('$ prisma deploy --stage production') + "\n    \n" + chalk_1.default.gray('-') + " Deploy local changes from default service file accepting potential data loss caused by schema changes\n  " + chalk_1.default.green('$ prisma deploy --force --stage production') + "\n  ";
    Deploy.flags = (_a = {
            force: prisma_cli_engine_1.flags.boolean({
                char: 'f',
                description: 'Accept data loss caused by schema changes',
            }),
            watch: prisma_cli_engine_1.flags.boolean({
                char: 'w',
                description: 'Watch for changes',
            }),
            interactive: prisma_cli_engine_1.flags.boolean({
                char: 'i',
                description: 'Force interactive mode to select the cluster',
            }),
            'dry-run': prisma_cli_engine_1.flags.boolean({
                char: 'd',
                description: 'Perform a dry-run of the deployment',
            }),
            'no-seed': prisma_cli_engine_1.flags.boolean({
                description: 'Disable seed on initial service deploy',
            }),
            json: prisma_cli_engine_1.flags.boolean({
                char: 'j',
                description: 'Json Output',
            })
        },
        _a['env-file'] = prisma_cli_engine_1.flags.string({
            description: 'Path to .env file to inject env vars',
            char: 'e',
        }),
        _a);
    return Deploy;
}(prisma_cli_engine_1.Command));
exports.default = Deploy;
function isValidProjectName(projectName) {
    return /^[A-Z](.*)/.test(projectName);
}
exports.isValidProjectName = isValidProjectName;
function slugify(text) {
    return text
        .toString()
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with -
        .replace(/[^\w\-]+/g, '') // Remove all non-word chars
        .replace(/\-\-+/g, '-') // Replace multiple - with single -
        .replace(/^-+/, '') // Trim - from start of text
        .replace(/-+$/, ''); // Trim - from end of text
}
var _a;
//# sourceMappingURL=index.js.map