"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_cli_engine_1 = require("prisma-cli-engine");
var fs = require("fs-extra");
var path = require("path");
var chalk_1 = require("chalk");
var debug = require('debug')('init');
var spawn = require("cross-spawn");
var getGraphQLCliBin_1 = require("../../utils/getGraphQLCliBin");
var Init = /** @class */ (function (_super) {
    __extends(Init, _super);
    function Init() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Init.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dirName, newDefinitionDir, boilerplate, choice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dirName = this.args.dirName;
                        if (dirName) {
                            newDefinitionDir = path.join(process.cwd(), dirName + '/');
                            this.config.definitionDir = newDefinitionDir;
                            fs.mkdirpSync(newDefinitionDir);
                        }
                        else {
                            this.config.definitionDir = process.cwd();
                        }
                        boilerplate = this.flags.boilerplate;
                        if (!boilerplate) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.graphqlCreate(boilerplate)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 2: return [4 /*yield*/, this.prompt()];
                    case 3:
                        choice = _a.sent();
                        if (!(choice === 'create')) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.graphqlCreate()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        this.initMinimal();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Init.prototype.prompt = function () {
        return __awaiter(this, void 0, void 0, function () {
            var question, prompt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        question = {
                            name: 'prompt',
                            type: 'list',
                            message: "How to set up a new Prisma service?",
                            choices: [
                                {
                                    name: 'Minimal setup: database-only',
                                    value: 'minimal',
                                },
                                {
                                    name: 'GraphQL server/fullstack boilerplate (recommended)',
                                    value: 'create',
                                },
                            ],
                            pageSize: 2,
                        };
                        return [4 /*yield*/, this.out.prompt(question)];
                    case 1:
                        prompt = (_a.sent()).prompt;
                        this.out.up(1);
                        return [2 /*return*/, prompt];
                }
            });
        });
    };
    Init.prototype.initMinimal = function () {
        var files = fs.readdirSync(this.config.definitionDir);
        // the .prismarc must be allowed for the docker version to be functioning
        // CONTINUE: special env handling for dockaa. can't just override the host/dinges
        if (files.length > 0 &&
            (files.includes('prisma.yml') || files.includes('datamodel.graphql'))) {
            this.out.log("\nThe directory " + chalk_1.default.cyan(this.config.definitionDir) + " contains files that could conflict:\n\n" + files.map(function (f) { return "  " + f; }).join('\n') + "\n\nEither try using a new directory name, or remove the files listed above.\n      ");
            this.out.exit(1);
        }
        fs.copySync(path.join(__dirname, 'boilerplate'), this.config.definitionDir);
        var relativeDir = path.relative(process.cwd(), this.config.definitionDir);
        relativeDir = relativeDir.length === 0 ? '.' : relativeDir;
        var definitionPath = path.join(this.config.definitionDir, 'prisma.yml');
        var prismaYml = fs.readFileSync(definitionPath, 'utf-8');
        var newPrismaYml = prismaYml.replace('SERVICE_NAME', path.basename(this.config.definitionDir));
        fs.writeFileSync(definitionPath, newPrismaYml);
        var dir = this.args.dirName;
        var dirString = dir
            ? "Open the new folder via " + chalk_1.default.cyan("$ cd " + dir) + ". "
            : "";
        this.out.log("Created 3 new files:               \n\n  " + chalk_1.default.cyan('prisma.yml') + "           Prisma service definition\n  " + chalk_1.default.cyan('datamodel.graphql') + "    GraphQL SDL-based datamodel (foundation for database)\n  " + chalk_1.default.cyan('.graphqlconfig.yml') + "   Configuration file for GraphQL tooling (Playground, IDE, \u2026)\n\n" + dirString + "You can now run " + chalk_1.default.cyan('$ prisma deploy') + " to deploy your database service.\n\nFor next steps follow this tutorial: https://bit.ly/prisma-graphql-first-steps");
    };
    Init.prototype.graphqlCreate = function (boilerplate) {
        return __awaiter(this, void 0, void 0, function () {
            var args, binPath, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.out.log("Running " + chalk_1.default.cyan('$ graphql create') + " ...                             ");
                        args = ['create'];
                        if (this.args && this.args.dirName) {
                            args.push(this.args.dirName);
                        }
                        if (boilerplate) {
                            args.push('--boilerplate');
                            args.push(boilerplate);
                        }
                        debug('running graphql cli');
                        return [4 /*yield*/, getGraphQLCliBin_1.default()];
                    case 1:
                        binPath = _a.sent();
                        debug({ binPath: binPath, args: args });
                        result = spawn.sync(binPath, args, {
                            stdio: 'inherit',
                        });
                        if (result.error) {
                            if (result.error.message.includes('ENOENT')) {
                                throw new Error("Could not start graphql cli. Please try to install it globally with " + chalk_1.default.bold('npm install -g graphql-cli'));
                            }
                            throw result.error;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Init.topic = 'init';
    Init.description = 'Initialize a new service';
    Init.args = [
        {
            name: 'dirName',
            description: 'Folder to initialize in (optional)',
        },
    ];
    Init.flags = {
        boilerplate: prisma_cli_engine_1.flags.string({
            char: 'b',
            description: 'Full URL or repo shorthand (e.g. `owner/repo`) to boilerplate GitHub repository',
        }),
    };
    return Init;
}(prisma_cli_engine_1.Command));
exports.default = Init;
//# sourceMappingURL=index.js.map